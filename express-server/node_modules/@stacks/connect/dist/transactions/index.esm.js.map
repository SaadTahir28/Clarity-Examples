{"version":3,"file":"index.esm.js","sources":["../../src/transactions/index.ts"],"sourcesContent":["import { UserSession, AppConfig } from '@stacks/auth';\nimport { SECP256K1Client, TokenSigner } from 'jsontokens';\nimport {\n  ContractCallOptions,\n  ContractCallPayload,\n  ContractDeployOptions,\n  ContractDeployPayload,\n  TransactionPopup,\n  TransactionOptions,\n  STXTransferOptions,\n  STXTransferPayload,\n  TransactionPayload,\n  TransactionTypes,\n  STXTransferSponsoredOptions,\n  STXTransferRegularOptions,\n  ContractDeployRegularOptions,\n  ContractDeploySponsoredOptions,\n  ContractCallRegularOptions,\n  ContractCallSponsoredOptions,\n  SponsoredFinishedTxPayload,\n  FinishedTxPayload,\n} from '../types/transactions';\nimport {\n  serializeCV,\n  ChainID,\n  deserializeTransaction,\n  BufferReader,\n  serializePostCondition,\n  PostCondition,\n} from '@stacks/transactions';\nimport { getStacksProvider } from '../utils';\nimport { StacksTestnet } from '@stacks/network';\n\nconst getUserSession = (_userSession?: UserSession) => {\n  let userSession = _userSession;\n\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nconst getKeys = (_userSession?: UserSession) => {\n  const userSession = getUserSession(_userSession);\n  const privateKey = userSession.loadUserData().appPrivateKey;\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n\n  return { privateKey, publicKey };\n};\n\nfunction getStxAddress(options: TransactionOptions) {\n  const { stxAddress, userSession, network } = options;\n\n  if (stxAddress) return stxAddress;\n  if (!userSession || !network) return undefined;\n  const stxAddresses = userSession?.loadUserData().profile?.stxAddress;\n  const chainIdToKey = {\n    [ChainID.Mainnet]: 'mainnet',\n    [ChainID.Testnet]: 'testnet',\n  };\n  const address: string | undefined = stxAddresses?.[chainIdToKey[network.chainId]];\n  return address;\n}\n\nfunction getDefaults(options: TransactionOptions) {\n  const network = options.network || new StacksTestnet();\n  const userSession = getUserSession(options.userSession);\n  const defaults: TransactionOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n  return {\n    stxAddress: getStxAddress(defaults),\n    ...defaults,\n  };\n}\n\nconst signPayload = async (payload: TransactionPayload, privateKey: string) => {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = (postConditions as PostCondition[]).map(pc =>\n      serializePostCondition(pc).toString('hex')\n    );\n  }\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  return tokenSigner.signAsync({\n    ...payload,\n    postConditions,\n  } as any);\n};\n\nconst openTransactionPopup = ({ token, options }: TransactionPopup) => {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Stacks Wallet not installed.');\n  }\n  void provider\n    .transactionRequest(token)\n    .then(data => {\n      const finishedCallback = options.finished || options.onFinish;\n      const { txRaw } = data;\n      const txBuffer = Buffer.from(txRaw.replace(/^0x/, ''), 'hex');\n      const stacksTransaction = deserializeTransaction(new BufferReader(txBuffer));\n\n      if ('sponsored' in options && options.sponsored) {\n        const finishedCallback = options.onFinish || options.finished;\n        finishedCallback?.({\n          ...(data as SponsoredFinishedTxPayload),\n          stacksTransaction,\n        });\n        return;\n      }\n      finishedCallback?.({\n        ...(data as FinishedTxPayload),\n        stacksTransaction,\n      });\n    })\n    .catch(error => {\n      console.error('[Connect] Error during transaction request', error);\n      options.onCancel?.();\n    });\n\n  if (true) return;\n};\n\nexport const makeContractCallToken = async (options: ContractCallOptions) => {\n  const { functionArgs, appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const args: string[] = functionArgs.map(arg => {\n    if (typeof arg === 'string') {\n      return arg;\n    }\n    return serializeCV(arg).toString('hex');\n  });\n\n  const payload: ContractCallPayload = {\n    ..._options,\n    functionArgs: args,\n    txType: TransactionTypes.ContractCall,\n    publicKey,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nexport const makeContractDeployToken = async (options: ContractDeployOptions) => {\n  const { appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const payload: ContractDeployPayload = {\n    ..._options,\n    publicKey,\n    txType: TransactionTypes.ContractDeploy,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nexport const makeSTXTransferToken = async (options: STXTransferOptions) => {\n  const { amount, appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const payload: STXTransferPayload = {\n    ..._options,\n    amount: amount.toString(10),\n    publicKey,\n    txType: TransactionTypes.STXTransfer,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nasync function generateTokenAndOpenPopup<T extends TransactionOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaults(options),\n    ...options,\n  } as T);\n  return openTransactionPopup({ token, options });\n}\n\nexport function openContractCall(options: ContractCallRegularOptions): Promise<void>;\nexport function openContractCall(options: ContractCallSponsoredOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions) {\n  return generateTokenAndOpenPopup(options, makeContractCallToken);\n}\n\nexport function openContractDeploy(options: ContractDeployRegularOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeploySponsoredOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions) {\n  return generateTokenAndOpenPopup(options, makeContractDeployToken);\n}\n\nexport function openSTXTransfer(options: STXTransferRegularOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferSponsoredOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions) {\n  return generateTokenAndOpenPopup(options, makeSTXTransferToken);\n}\n"],"names":["getUserSession","_userSession","userSession","appConfig","AppConfig","document","location","href","UserSession","getKeys","privateKey","loadUserData","appPrivateKey","publicKey","SECP256K1Client","derivePublicKey","options","stxAddress","network","stxAddresses","profile","chainIdToKey","ChainID","Mainnet","Testnet","address","chainId","StacksTestnet","defaults","getStxAddress","signPayload","payload","postConditions","map","serializePostCondition","pc","toString","tokenSigner","TokenSigner","signAsync","openTransactionPopup","token","provider","getStacksProvider","Error","transactionRequest","then","finishedCallback","finished","onFinish","txRaw","data","txBuffer","Buffer","from","replace","stacksTransaction","deserializeTransaction","BufferReader","sponsored","finishedCallback2","error","onCancel","makeContractCallToken","functionArgs","appDetails","_options","args","arg","serializeCV","txType","TransactionTypes","ContractCall","makeContractDeployToken","ContractDeploy","makeSTXTransferToken","amount","STXTransfer","makeTokenFn","getDefaults","generateTokenAndOpenPopup"],"mappings":"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"}
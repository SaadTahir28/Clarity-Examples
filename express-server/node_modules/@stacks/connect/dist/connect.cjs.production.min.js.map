{"version":3,"file":"connect.cjs.production.min.js","sources":["../src/utils.ts","../src/auth.ts","../src/types/transactions.ts","../src/transactions/index.ts","../src/ui.ts"],"sourcesContent":["export function getStacksProvider() {\n  return window.StacksProvider || window.BlockstackProvider;\n}\n\nexport function isStacksWalletInstalled() {\n  return !!getStacksProvider();\n}\n","import { AppConfig, UserSession } from '@stacks/auth';\nimport type { AuthOptions } from './types';\n\nimport { getStacksProvider } from './utils';\n\nexport const defaultAuthURL = 'https://app.blockstack.org';\n\nconst version = __VERSION__;\n\nif (typeof window !== 'undefined') {\n  window.__CONNECT_VERSION__ = version;\n}\n\nexport const isMobile = () => {\n  const ua = navigator.userAgent;\n  if (/android/i.test(ua)) {\n    return true;\n  }\n  if (/iPad|iPhone|iPod/.test(ua)) {\n    return true;\n  }\n  return /windows phone/i.test(ua);\n};\n\n/**\n * mobile should not use a 'popup' type of window.\n */\nexport const shouldUsePopup = () => {\n  return !isMobile();\n};\n\nexport const getOrCreateUserSession = (userSession?: UserSession): UserSession => {\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nexport const authenticate = (authOptions: AuthOptions) => {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Unable to authenticate without Stacks Wallet extension');\n  }\n\n  const {\n    redirectTo = '/',\n    manifestPath,\n    finished,\n    onFinish,\n    onCancel,\n    sendToSignIn = false,\n    userSession: _userSession,\n    appDetails,\n  } = authOptions;\n  const userSession = getOrCreateUserSession(_userSession);\n  if (userSession.isUserSignedIn()) {\n    userSession.signUserOut();\n  }\n  const transitKey = userSession.generateAndStoreTransitKey();\n  const authRequest = userSession.makeAuthRequest(\n    transitKey,\n    `${document.location.origin}${redirectTo}`,\n    `${document.location.origin}${manifestPath}`,\n    userSession.appConfig.scopes,\n    undefined,\n    undefined,\n    {\n      sendToSignIn,\n      appDetails,\n      connectVersion: version,\n    }\n  );\n\n  void provider\n    .authenticationRequest(authRequest)\n    .then(async authResponse => {\n      await userSession.handlePendingSignIn(authResponse);\n      const success = onFinish || finished;\n      success?.({\n        authResponse,\n        userSession,\n      });\n    })\n    .catch(error => {\n      console.error('[Connect] Error during auth request', error);\n      onCancel?.();\n    });\n};\n\nexport const getUserData = async (userSession?: UserSession) => {\n  userSession = getOrCreateUserSession(userSession);\n  if (userSession.isUserSignedIn()) {\n    return userSession.loadUserData();\n  }\n  if (userSession.isSignInPending()) {\n    return userSession.handlePendingSignIn();\n  }\n  return null;\n};\n","import { UserSession } from '@stacks/auth';\nimport type { AuthOptions } from '../types/auth';\nimport {\n  PostConditionMode,\n  PostCondition,\n  AnchorMode,\n  ClarityValue,\n  StacksTransaction,\n} from '@stacks/transactions';\nimport { StacksNetwork } from '@stacks/network';\nimport BN from 'bn.js';\n\nexport interface TxBase {\n  appDetails?: AuthOptions['appDetails'];\n  postConditionMode?: PostConditionMode;\n  postConditions?: (string | PostCondition)[];\n  network?: StacksNetwork;\n  anchorMode?: AnchorMode;\n  attachment?: string;\n  /**\n   * Provide the Stacks Wallet with a suggested account to sign this transaction with.\n   * This is set by default if a `userSession` option is provided.\n   */\n  stxAddress?: string;\n  /** @deprecated `unused - only included for compatibility with @stacks/transactions` */\n  senderKey?: string;\n  /** @deprecated `unused - only included for compatibility with @stacks/transactions` */\n  nonce?: number;\n}\n\nexport interface SponsoredFinishedTxPayload {\n  txRaw: string;\n}\n\nexport interface SponsoredFinishedTxData extends SponsoredFinishedTxPayload {\n  stacksTransaction: StacksTransaction;\n}\n\nexport interface FinishedTxPayload extends SponsoredFinishedTxPayload {\n  txId: string;\n}\n\nexport interface FinishedTxData extends FinishedTxPayload {\n  stacksTransaction: StacksTransaction;\n}\n\nexport enum TransactionTypes {\n  ContractCall = 'contract_call',\n  ContractDeploy = 'smart_contract',\n  STXTransfer = 'token_transfer',\n}\n\n/**\n * Contract Call\n */\n\nexport enum ContractCallArgumentType {\n  BUFFER = 'buffer',\n  UINT = 'uint',\n  INT = 'int',\n  PRINCIPAL = 'principal',\n  BOOL = 'bool',\n}\n\nexport interface ContractCallBase extends TxBase {\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: (string | ClarityValue)[];\n}\n\nexport interface OptionsBase {\n  /**\n   * @deprecated Authentication is no longer supported through a hosted\n   * version. Users must install an extension.\n   */\n  authOrigin?: string;\n  userSession?: UserSession;\n}\n\nexport type SponsoredFinished = (data: SponsoredFinishedTxData) => void;\nexport type Finished = (data: FinishedTxData) => void;\nexport type Canceled = () => void;\n\nexport interface SponsoredOptionsBase extends TxBase, OptionsBase {\n  sponsored: true;\n  /** @deprecated use `onFinish` */\n  finished?: SponsoredFinished;\n  onFinish?: SponsoredFinished;\n  onCancel?: Canceled;\n}\n\nexport interface RegularOptionsBase extends TxBase, OptionsBase {\n  sponsored?: false;\n  /** @deprecated use `onFinish` */\n  finished?: Finished;\n  onFinish?: Finished;\n  onCancel?: Canceled;\n}\n\nexport type ContractCallRegularOptions = ContractCallBase & RegularOptionsBase;\nexport type ContractCallSponsoredOptions = ContractCallBase & SponsoredOptionsBase;\nexport type ContractCallOptions = ContractCallRegularOptions | ContractCallSponsoredOptions;\n\nexport interface ContractCallArgument {\n  type: ContractCallArgumentType;\n  value: string;\n}\n\nexport interface ContractCallPayload extends ContractCallBase {\n  txType: TransactionTypes.ContractCall;\n  publicKey: string;\n  functionArgs: string[];\n  sponsored?: boolean;\n}\n\n/**\n * Contract Deploy\n */\nexport interface ContractDeployBase extends TxBase {\n  contractName: string;\n  codeBody: string;\n}\n\nexport type ContractDeployRegularOptions = ContractDeployBase & RegularOptionsBase;\nexport type ContractDeploySponsoredOptions = ContractDeployBase & SponsoredOptionsBase;\nexport type ContractDeployOptions = ContractDeployRegularOptions | ContractDeploySponsoredOptions;\n\nexport interface ContractDeployPayload extends ContractDeployBase {\n  publicKey: string;\n  txType: TransactionTypes.ContractDeploy;\n  sponsored?: boolean;\n}\n\n/**\n * STX Transfer\n */\n\nexport interface STXTransferBase extends TxBase {\n  recipient: string;\n  amount: BN | string;\n  memo?: string;\n}\n\nexport type STXTransferRegularOptions = STXTransferBase & RegularOptionsBase;\nexport type STXTransferSponsoredOptions = STXTransferBase & SponsoredOptionsBase;\nexport type STXTransferOptions = STXTransferRegularOptions | STXTransferSponsoredOptions;\n\nexport interface STXTransferPayload extends STXTransferBase {\n  publicKey: string;\n  txType: TransactionTypes.STXTransfer;\n  amount: string;\n  sponsored?: boolean;\n}\n\n/**\n * Transaction Popup\n */\n\nexport type TransactionOptions = ContractCallOptions | ContractDeployOptions | STXTransferOptions;\nexport type TransactionPayload = ContractCallPayload | ContractDeployPayload | STXTransferPayload;\n\nexport interface TransactionPopup {\n  token: string;\n  options: TransactionOptions;\n}\n","import { UserSession, AppConfig } from '@stacks/auth';\nimport { SECP256K1Client, TokenSigner } from 'jsontokens';\nimport {\n  ContractCallOptions,\n  ContractCallPayload,\n  ContractDeployOptions,\n  ContractDeployPayload,\n  TransactionPopup,\n  TransactionOptions,\n  STXTransferOptions,\n  STXTransferPayload,\n  TransactionPayload,\n  TransactionTypes,\n  STXTransferSponsoredOptions,\n  STXTransferRegularOptions,\n  ContractDeployRegularOptions,\n  ContractDeploySponsoredOptions,\n  ContractCallRegularOptions,\n  ContractCallSponsoredOptions,\n  SponsoredFinishedTxPayload,\n  FinishedTxPayload,\n} from '../types/transactions';\nimport {\n  serializeCV,\n  ChainID,\n  deserializeTransaction,\n  BufferReader,\n  serializePostCondition,\n  PostCondition,\n} from '@stacks/transactions';\nimport { getStacksProvider } from '../utils';\nimport { StacksTestnet } from '@stacks/network';\n\nconst getUserSession = (_userSession?: UserSession) => {\n  let userSession = _userSession;\n\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nconst getKeys = (_userSession?: UserSession) => {\n  const userSession = getUserSession(_userSession);\n  const privateKey = userSession.loadUserData().appPrivateKey;\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n\n  return { privateKey, publicKey };\n};\n\nfunction getStxAddress(options: TransactionOptions) {\n  const { stxAddress, userSession, network } = options;\n\n  if (stxAddress) return stxAddress;\n  if (!userSession || !network) return undefined;\n  const stxAddresses = userSession?.loadUserData().profile?.stxAddress;\n  const chainIdToKey = {\n    [ChainID.Mainnet]: 'mainnet',\n    [ChainID.Testnet]: 'testnet',\n  };\n  const address: string | undefined = stxAddresses?.[chainIdToKey[network.chainId]];\n  return address;\n}\n\nfunction getDefaults(options: TransactionOptions) {\n  const network = options.network || new StacksTestnet();\n  const userSession = getUserSession(options.userSession);\n  const defaults: TransactionOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n  return {\n    stxAddress: getStxAddress(defaults),\n    ...defaults,\n  };\n}\n\nconst signPayload = async (payload: TransactionPayload, privateKey: string) => {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = (postConditions as PostCondition[]).map(pc =>\n      serializePostCondition(pc).toString('hex')\n    );\n  }\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  return tokenSigner.signAsync({\n    ...payload,\n    postConditions,\n  } as any);\n};\n\nconst openTransactionPopup = ({ token, options }: TransactionPopup) => {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Stacks Wallet not installed.');\n  }\n  void provider\n    .transactionRequest(token)\n    .then(data => {\n      const finishedCallback = options.finished || options.onFinish;\n      const { txRaw } = data;\n      const txBuffer = Buffer.from(txRaw.replace(/^0x/, ''), 'hex');\n      const stacksTransaction = deserializeTransaction(new BufferReader(txBuffer));\n\n      if ('sponsored' in options && options.sponsored) {\n        const finishedCallback = options.onFinish || options.finished;\n        finishedCallback?.({\n          ...(data as SponsoredFinishedTxPayload),\n          stacksTransaction,\n        });\n        return;\n      }\n      finishedCallback?.({\n        ...(data as FinishedTxPayload),\n        stacksTransaction,\n      });\n    })\n    .catch(error => {\n      console.error('[Connect] Error during transaction request', error);\n      options.onCancel?.();\n    });\n\n  if (true) return;\n};\n\nexport const makeContractCallToken = async (options: ContractCallOptions) => {\n  const { functionArgs, appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const args: string[] = functionArgs.map(arg => {\n    if (typeof arg === 'string') {\n      return arg;\n    }\n    return serializeCV(arg).toString('hex');\n  });\n\n  const payload: ContractCallPayload = {\n    ..._options,\n    functionArgs: args,\n    txType: TransactionTypes.ContractCall,\n    publicKey,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nexport const makeContractDeployToken = async (options: ContractDeployOptions) => {\n  const { appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const payload: ContractDeployPayload = {\n    ..._options,\n    publicKey,\n    txType: TransactionTypes.ContractDeploy,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nexport const makeSTXTransferToken = async (options: STXTransferOptions) => {\n  const { amount, appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const payload: STXTransferPayload = {\n    ..._options,\n    amount: amount.toString(10),\n    publicKey,\n    txType: TransactionTypes.STXTransfer,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nasync function generateTokenAndOpenPopup<T extends TransactionOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaults(options),\n    ...options,\n  } as T);\n  return openTransactionPopup({ token, options });\n}\n\nexport function openContractCall(options: ContractCallRegularOptions): Promise<void>;\nexport function openContractCall(options: ContractCallSponsoredOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions) {\n  return generateTokenAndOpenPopup(options, makeContractCallToken);\n}\n\nexport function openContractDeploy(options: ContractDeployRegularOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeploySponsoredOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions) {\n  return generateTokenAndOpenPopup(options, makeContractDeployToken);\n}\n\nexport function openSTXTransfer(options: STXTransferRegularOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferSponsoredOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions) {\n  return generateTokenAndOpenPopup(options, makeSTXTransferToken);\n}\n","import { authenticate } from './auth';\nimport type { AuthOptions } from './types/auth';\nimport { defineCustomElements } from '@stacks/connect-ui';\nimport { getStacksProvider } from './utils';\n\nexport const showConnect = (authOptions: AuthOptions) => {\n  if (getStacksProvider()) {\n    void authenticate(authOptions);\n    return;\n  }\n  defineCustomElements();\n  const element = document.createElement('connect-modal');\n  element.authOptions = authOptions;\n  document.body.appendChild(element);\n  const handleEsc = (ev: KeyboardEvent) => {\n    if (ev.key === 'Escape') {\n      document.removeEventListener('keydown', handleEsc);\n      element.remove();\n    }\n  };\n  document.addEventListener('keydown', handleEsc);\n};\n\n/**\n * @deprecated Use the renamed `showConnect` method\n */\nexport const showBlockstackConnect = (authOptions: AuthOptions) => showConnect(authOptions);\n"],"names":["window","StacksProvider","BlockstackProvider","__CONNECT_VERSION__","__VERSION__","TransactionTypes2","ContractCallArgumentType2","isMobile","ua","navigator","userAgent","test","getOrCreateUserSession","userSession","appConfig","AppConfig","document","location","href","UserSession","authenticate","authOptions","provider","getStacksProvider","Error","redirectTo","manifestPath","finished","onFinish","onCancel","sendToSignIn","appDetails","isUserSignedIn","signUserOut","transitKey","generateAndStoreTransitKey","authRequest","makeAuthRequest","origin","scopes","connectVersion","authenticationRequest","then","authResponse","handlePendingSignIn","success","error","getUserData","loadUserData","isSignInPending","TransactionTypes","ContractCallArgumentType","getUserSession","_userSession","getKeys","privateKey","appPrivateKey","publicKey","SECP256K1Client","derivePublicKey","options","stxAddress","network","stxAddresses","profile","_userSession$loadUser","chainIdToKey","ChainID","Mainnet","Testnet","chainId","defaults","StacksTestnet","getStxAddress","signPayload","payload","postConditions","map","serializePostCondition","pc","toString","tokenSigner","TokenSigner","signAsync","openTransactionPopup","token","transactionRequest","finishedCallback","txBuffer","Buffer","from","data","txRaw","replace","stacksTransaction","deserializeTransaction","BufferReader","sponsored","finishedCallback2","makeContractCallToken","functionArgs","_options","args","arg","serializeCV","txType","ContractCall","makeContractDeployToken","ContractDeploy","makeSTXTransferToken","amount","STXTransfer","makeTokenFn","getDefaults","showConnect","element","createElement","body","appendChild","addEventListener","handleEsc","ev","key","removeEventListener","remove","generateTokenAndOpenPopup"],"mappings":"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"}
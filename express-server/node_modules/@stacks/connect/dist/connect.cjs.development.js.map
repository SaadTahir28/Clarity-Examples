{"version":3,"file":"connect.cjs.development.js","sources":["../src/utils.ts","../src/auth.ts","../src/types/transactions.ts","../src/transactions/index.ts","../src/ui.ts"],"sourcesContent":["export function getStacksProvider() {\n  return window.StacksProvider || window.BlockstackProvider;\n}\n\nexport function isStacksWalletInstalled() {\n  return !!getStacksProvider();\n}\n","import { AppConfig, UserSession } from '@stacks/auth';\nimport type { AuthOptions } from './types';\n\nimport { getStacksProvider } from './utils';\n\nexport const defaultAuthURL = 'https://app.blockstack.org';\n\nconst version = __VERSION__;\n\nif (typeof window !== 'undefined') {\n  window.__CONNECT_VERSION__ = version;\n}\n\nexport const isMobile = () => {\n  const ua = navigator.userAgent;\n  if (/android/i.test(ua)) {\n    return true;\n  }\n  if (/iPad|iPhone|iPod/.test(ua)) {\n    return true;\n  }\n  return /windows phone/i.test(ua);\n};\n\n/**\n * mobile should not use a 'popup' type of window.\n */\nexport const shouldUsePopup = () => {\n  return !isMobile();\n};\n\nexport const getOrCreateUserSession = (userSession?: UserSession): UserSession => {\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nexport const authenticate = (authOptions: AuthOptions) => {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Unable to authenticate without Stacks Wallet extension');\n  }\n\n  const {\n    redirectTo = '/',\n    manifestPath,\n    finished,\n    onFinish,\n    onCancel,\n    sendToSignIn = false,\n    userSession: _userSession,\n    appDetails,\n  } = authOptions;\n  const userSession = getOrCreateUserSession(_userSession);\n  if (userSession.isUserSignedIn()) {\n    userSession.signUserOut();\n  }\n  const transitKey = userSession.generateAndStoreTransitKey();\n  const authRequest = userSession.makeAuthRequest(\n    transitKey,\n    `${document.location.origin}${redirectTo}`,\n    `${document.location.origin}${manifestPath}`,\n    userSession.appConfig.scopes,\n    undefined,\n    undefined,\n    {\n      sendToSignIn,\n      appDetails,\n      connectVersion: version,\n    }\n  );\n\n  void provider\n    .authenticationRequest(authRequest)\n    .then(async authResponse => {\n      await userSession.handlePendingSignIn(authResponse);\n      const success = onFinish || finished;\n      success?.({\n        authResponse,\n        userSession,\n      });\n    })\n    .catch(error => {\n      console.error('[Connect] Error during auth request', error);\n      onCancel?.();\n    });\n};\n\nexport const getUserData = async (userSession?: UserSession) => {\n  userSession = getOrCreateUserSession(userSession);\n  if (userSession.isUserSignedIn()) {\n    return userSession.loadUserData();\n  }\n  if (userSession.isSignInPending()) {\n    return userSession.handlePendingSignIn();\n  }\n  return null;\n};\n","import { UserSession } from '@stacks/auth';\nimport type { AuthOptions } from '../types/auth';\nimport {\n  PostConditionMode,\n  PostCondition,\n  AnchorMode,\n  ClarityValue,\n  StacksTransaction,\n} from '@stacks/transactions';\nimport { StacksNetwork } from '@stacks/network';\nimport BN from 'bn.js';\n\nexport interface TxBase {\n  appDetails?: AuthOptions['appDetails'];\n  postConditionMode?: PostConditionMode;\n  postConditions?: (string | PostCondition)[];\n  network?: StacksNetwork;\n  anchorMode?: AnchorMode;\n  attachment?: string;\n  /**\n   * Provide the Stacks Wallet with a suggested account to sign this transaction with.\n   * This is set by default if a `userSession` option is provided.\n   */\n  stxAddress?: string;\n  /** @deprecated `unused - only included for compatibility with @stacks/transactions` */\n  senderKey?: string;\n  /** @deprecated `unused - only included for compatibility with @stacks/transactions` */\n  nonce?: number;\n}\n\nexport interface SponsoredFinishedTxPayload {\n  txRaw: string;\n}\n\nexport interface SponsoredFinishedTxData extends SponsoredFinishedTxPayload {\n  stacksTransaction: StacksTransaction;\n}\n\nexport interface FinishedTxPayload extends SponsoredFinishedTxPayload {\n  txId: string;\n}\n\nexport interface FinishedTxData extends FinishedTxPayload {\n  stacksTransaction: StacksTransaction;\n}\n\nexport enum TransactionTypes {\n  ContractCall = 'contract_call',\n  ContractDeploy = 'smart_contract',\n  STXTransfer = 'token_transfer',\n}\n\n/**\n * Contract Call\n */\n\nexport enum ContractCallArgumentType {\n  BUFFER = 'buffer',\n  UINT = 'uint',\n  INT = 'int',\n  PRINCIPAL = 'principal',\n  BOOL = 'bool',\n}\n\nexport interface ContractCallBase extends TxBase {\n  contractAddress: string;\n  contractName: string;\n  functionName: string;\n  functionArgs: (string | ClarityValue)[];\n}\n\nexport interface OptionsBase {\n  /**\n   * @deprecated Authentication is no longer supported through a hosted\n   * version. Users must install an extension.\n   */\n  authOrigin?: string;\n  userSession?: UserSession;\n}\n\nexport type SponsoredFinished = (data: SponsoredFinishedTxData) => void;\nexport type Finished = (data: FinishedTxData) => void;\nexport type Canceled = () => void;\n\nexport interface SponsoredOptionsBase extends TxBase, OptionsBase {\n  sponsored: true;\n  /** @deprecated use `onFinish` */\n  finished?: SponsoredFinished;\n  onFinish?: SponsoredFinished;\n  onCancel?: Canceled;\n}\n\nexport interface RegularOptionsBase extends TxBase, OptionsBase {\n  sponsored?: false;\n  /** @deprecated use `onFinish` */\n  finished?: Finished;\n  onFinish?: Finished;\n  onCancel?: Canceled;\n}\n\nexport type ContractCallRegularOptions = ContractCallBase & RegularOptionsBase;\nexport type ContractCallSponsoredOptions = ContractCallBase & SponsoredOptionsBase;\nexport type ContractCallOptions = ContractCallRegularOptions | ContractCallSponsoredOptions;\n\nexport interface ContractCallArgument {\n  type: ContractCallArgumentType;\n  value: string;\n}\n\nexport interface ContractCallPayload extends ContractCallBase {\n  txType: TransactionTypes.ContractCall;\n  publicKey: string;\n  functionArgs: string[];\n  sponsored?: boolean;\n}\n\n/**\n * Contract Deploy\n */\nexport interface ContractDeployBase extends TxBase {\n  contractName: string;\n  codeBody: string;\n}\n\nexport type ContractDeployRegularOptions = ContractDeployBase & RegularOptionsBase;\nexport type ContractDeploySponsoredOptions = ContractDeployBase & SponsoredOptionsBase;\nexport type ContractDeployOptions = ContractDeployRegularOptions | ContractDeploySponsoredOptions;\n\nexport interface ContractDeployPayload extends ContractDeployBase {\n  publicKey: string;\n  txType: TransactionTypes.ContractDeploy;\n  sponsored?: boolean;\n}\n\n/**\n * STX Transfer\n */\n\nexport interface STXTransferBase extends TxBase {\n  recipient: string;\n  amount: BN | string;\n  memo?: string;\n}\n\nexport type STXTransferRegularOptions = STXTransferBase & RegularOptionsBase;\nexport type STXTransferSponsoredOptions = STXTransferBase & SponsoredOptionsBase;\nexport type STXTransferOptions = STXTransferRegularOptions | STXTransferSponsoredOptions;\n\nexport interface STXTransferPayload extends STXTransferBase {\n  publicKey: string;\n  txType: TransactionTypes.STXTransfer;\n  amount: string;\n  sponsored?: boolean;\n}\n\n/**\n * Transaction Popup\n */\n\nexport type TransactionOptions = ContractCallOptions | ContractDeployOptions | STXTransferOptions;\nexport type TransactionPayload = ContractCallPayload | ContractDeployPayload | STXTransferPayload;\n\nexport interface TransactionPopup {\n  token: string;\n  options: TransactionOptions;\n}\n","import { UserSession, AppConfig } from '@stacks/auth';\nimport { SECP256K1Client, TokenSigner } from 'jsontokens';\nimport {\n  ContractCallOptions,\n  ContractCallPayload,\n  ContractDeployOptions,\n  ContractDeployPayload,\n  TransactionPopup,\n  TransactionOptions,\n  STXTransferOptions,\n  STXTransferPayload,\n  TransactionPayload,\n  TransactionTypes,\n  STXTransferSponsoredOptions,\n  STXTransferRegularOptions,\n  ContractDeployRegularOptions,\n  ContractDeploySponsoredOptions,\n  ContractCallRegularOptions,\n  ContractCallSponsoredOptions,\n  SponsoredFinishedTxPayload,\n  FinishedTxPayload,\n} from '../types/transactions';\nimport {\n  serializeCV,\n  ChainID,\n  deserializeTransaction,\n  BufferReader,\n  serializePostCondition,\n  PostCondition,\n} from '@stacks/transactions';\nimport { getStacksProvider } from '../utils';\nimport { StacksTestnet } from '@stacks/network';\n\nconst getUserSession = (_userSession?: UserSession) => {\n  let userSession = _userSession;\n\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nconst getKeys = (_userSession?: UserSession) => {\n  const userSession = getUserSession(_userSession);\n  const privateKey = userSession.loadUserData().appPrivateKey;\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n\n  return { privateKey, publicKey };\n};\n\nfunction getStxAddress(options: TransactionOptions) {\n  const { stxAddress, userSession, network } = options;\n\n  if (stxAddress) return stxAddress;\n  if (!userSession || !network) return undefined;\n  const stxAddresses = userSession?.loadUserData().profile?.stxAddress;\n  const chainIdToKey = {\n    [ChainID.Mainnet]: 'mainnet',\n    [ChainID.Testnet]: 'testnet',\n  };\n  const address: string | undefined = stxAddresses?.[chainIdToKey[network.chainId]];\n  return address;\n}\n\nfunction getDefaults(options: TransactionOptions) {\n  const network = options.network || new StacksTestnet();\n  const userSession = getUserSession(options.userSession);\n  const defaults: TransactionOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n  return {\n    stxAddress: getStxAddress(defaults),\n    ...defaults,\n  };\n}\n\nconst signPayload = async (payload: TransactionPayload, privateKey: string) => {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = (postConditions as PostCondition[]).map(pc =>\n      serializePostCondition(pc).toString('hex')\n    );\n  }\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  return tokenSigner.signAsync({\n    ...payload,\n    postConditions,\n  } as any);\n};\n\nconst openTransactionPopup = ({ token, options }: TransactionPopup) => {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Stacks Wallet not installed.');\n  }\n  void provider\n    .transactionRequest(token)\n    .then(data => {\n      const finishedCallback = options.finished || options.onFinish;\n      const { txRaw } = data;\n      const txBuffer = Buffer.from(txRaw.replace(/^0x/, ''), 'hex');\n      const stacksTransaction = deserializeTransaction(new BufferReader(txBuffer));\n\n      if ('sponsored' in options && options.sponsored) {\n        const finishedCallback = options.onFinish || options.finished;\n        finishedCallback?.({\n          ...(data as SponsoredFinishedTxPayload),\n          stacksTransaction,\n        });\n        return;\n      }\n      finishedCallback?.({\n        ...(data as FinishedTxPayload),\n        stacksTransaction,\n      });\n    })\n    .catch(error => {\n      console.error('[Connect] Error during transaction request', error);\n      options.onCancel?.();\n    });\n\n  if (true) return;\n};\n\nexport const makeContractCallToken = async (options: ContractCallOptions) => {\n  const { functionArgs, appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const args: string[] = functionArgs.map(arg => {\n    if (typeof arg === 'string') {\n      return arg;\n    }\n    return serializeCV(arg).toString('hex');\n  });\n\n  const payload: ContractCallPayload = {\n    ..._options,\n    functionArgs: args,\n    txType: TransactionTypes.ContractCall,\n    publicKey,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nexport const makeContractDeployToken = async (options: ContractDeployOptions) => {\n  const { appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const payload: ContractDeployPayload = {\n    ..._options,\n    publicKey,\n    txType: TransactionTypes.ContractDeploy,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nexport const makeSTXTransferToken = async (options: STXTransferOptions) => {\n  const { amount, appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const payload: STXTransferPayload = {\n    ..._options,\n    amount: amount.toString(10),\n    publicKey,\n    txType: TransactionTypes.STXTransfer,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nasync function generateTokenAndOpenPopup<T extends TransactionOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaults(options),\n    ...options,\n  } as T);\n  return openTransactionPopup({ token, options });\n}\n\nexport function openContractCall(options: ContractCallRegularOptions): Promise<void>;\nexport function openContractCall(options: ContractCallSponsoredOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions) {\n  return generateTokenAndOpenPopup(options, makeContractCallToken);\n}\n\nexport function openContractDeploy(options: ContractDeployRegularOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeploySponsoredOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions) {\n  return generateTokenAndOpenPopup(options, makeContractDeployToken);\n}\n\nexport function openSTXTransfer(options: STXTransferRegularOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferSponsoredOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions) {\n  return generateTokenAndOpenPopup(options, makeSTXTransferToken);\n}\n","import { authenticate } from './auth';\nimport type { AuthOptions } from './types/auth';\nimport { defineCustomElements } from '@stacks/connect-ui';\nimport { getStacksProvider } from './utils';\n\nexport const showConnect = (authOptions: AuthOptions) => {\n  if (getStacksProvider()) {\n    void authenticate(authOptions);\n    return;\n  }\n  defineCustomElements();\n  const element = document.createElement('connect-modal');\n  element.authOptions = authOptions;\n  document.body.appendChild(element);\n  const handleEsc = (ev: KeyboardEvent) => {\n    if (ev.key === 'Escape') {\n      document.removeEventListener('keydown', handleEsc);\n      element.remove();\n    }\n  };\n  document.addEventListener('keydown', handleEsc);\n};\n\n/**\n * @deprecated Use the renamed `showConnect` method\n */\nexport const showBlockstackConnect = (authOptions: AuthOptions) => showConnect(authOptions);\n"],"names":["window","StacksProvider","BlockstackProvider","getStacksProvider","defaultAuthURL","version","__VERSION__","__CONNECT_VERSION__","isMobile","ua","navigator","userAgent","test","shouldUsePopup","getOrCreateUserSession","userSession","appConfig","AppConfig","document","location","href","UserSession","authenticate","authOptions","provider","Error","redirectTo","manifestPath","finished","onFinish","onCancel","sendToSignIn","_userSession","appDetails","isUserSignedIn","signUserOut","transitKey","generateAndStoreTransitKey","authRequest","makeAuthRequest","origin","scopes","connectVersion","authenticationRequest","then","authResponse","handlePendingSignIn","success","error","getUserData","loadUserData","isSignInPending","TransactionTypes2","TransactionTypes","ContractCallArgumentType2","ContractCallArgumentType","getUserSession","getKeys","privateKey","appPrivateKey","publicKey","SECP256K1Client","derivePublicKey","options","stxAddress","network","stxAddresses","profile","chainIdToKey","ChainID","Mainnet","Testnet","address","chainId","StacksTestnet","defaults","getStxAddress","signPayload","payload","postConditions","map","serializePostCondition","pc","toString","tokenSigner","TokenSigner","signAsync","openTransactionPopup","token","transactionRequest","finishedCallback","txRaw","data","txBuffer","Buffer","from","replace","stacksTransaction","deserializeTransaction","BufferReader","sponsored","finishedCallback2","makeContractCallToken","functionArgs","_options","args","arg","serializeCV","txType","ContractCall","makeContractDeployToken","ContractDeploy","makeSTXTransferToken","amount","STXTransfer","makeTokenFn","getDefaults","generateTokenAndOpenPopup","showConnect","element","createElement","body","appendChild","handleEsc","ev","key","removeEventListener","remove","addEventListener","showBlockstackConnect"],"mappings":"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"}